<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Matthew Phillips</title>
    <link>https://matthewphillips.info/categories/javascript.html</link>
    <description>Recent content in Javascript on Matthew Phillips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Feb 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://matthewphillips.info/categories/javascript.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Debugging your application&#39;s View Model</title>
      <link>https://matthewphillips.info/posts/done-autorender-viewmodel.html</link>
      <pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matthewphillips.info/posts/done-autorender-viewmodel.html</guid>
      <description>&lt;p&gt;In the newly released version of &lt;a href=&#34;https://github.com/donejs/autorender&#34;&gt;done-autorender&lt;/a&gt; you now have access to your application&amp;rsquo;s View Model globally.&lt;/p&gt;

&lt;p&gt;The View Model I am referring to is the one that applies to your &lt;code&gt;index.stache&lt;/code&gt; template. In the &lt;a href=&#34;http://donejs.com/Guide.html#section=section_Addittothepage&#34;&gt;DoneJS chat&lt;/a&gt; example app is this part:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;can-import from=&amp;quot;donejs-chat/app&amp;quot; export-as=&amp;quot;viewModel&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In development mode especially (but also in production) it is nice to be able to make changes to your View Model in your browser&amp;rsquo;s devtools and see how it affects the page.&lt;/p&gt;

&lt;p&gt;You can now do that with done-autorender 0.6.1 To see your application&amp;rsquo;s View Model type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&amp;quot;html&amp;quot;).viewModel();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Into your console. This returns the can.Map instance which you can manipulate like any other can.Map.&lt;/p&gt;

&lt;p&gt;See below as I change the &lt;strong&gt;page&lt;/strong&gt; and &lt;strong&gt;title&lt;/strong&gt; in the donejs-chat application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://matthewphillips.info/appvm.gif&#34; alt=&#34;This is how you do it&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test Your Application Entry Point</title>
      <link>https://matthewphillips.info/posts/test-your-application-entry-point.html</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://matthewphillips.info/posts/test-your-application-entry-point.html</guid>
      <description>&lt;p&gt;This will be short and sweet. When working on a large JavaScript application (or a small one, for that matter) you&amp;rsquo;re going to have an entry point where you set up your world and get everything started. It probably looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;define([
  &#39;xwidget&#39;,
  &#39;ywidget&#39;,
  &#39;routing&#39;
], function(XWidget, YWidget, route){
  // Load everything!

  // Set up global state!
  var state = {
    light: &#39;green&#39;,
    time: new Date()
  };

  // Initialize main widget!
  var main = new XWidget(&#39;body&#39;, {
    subwidget: new YWidget($(&#39;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#39;), {}),
    state: state
  });

  // Listen for routes
  route(&#39;/calendar&#39;, function(){
    // Make some change to `main` probably
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s very easy to forget that not only is this an important chunk of code, it influences everything else that happens further down the chain in your application. &lt;strong&gt;Test it&lt;/strong&gt; as though it&amp;rsquo;s just as important, because it is.&lt;/p&gt;

&lt;p&gt;When you begin crafting your application as a pyramid of &lt;a href=&#34;http://dailyjs.com/2014/03/10/components-controls/&#34;&gt;web components&lt;/a&gt; this becomes even more critical. Using &lt;a href=&#34;http://canjs.com/guides/Components.html&#34;&gt;can.Component&lt;/a&gt;&amp;rsquo;s scoping rules, data you initialize in your &lt;code&gt;main.js&lt;/code&gt; will trickle down and be used by any component on your page, no matter how deeply nested.&lt;/p&gt;

&lt;p&gt;This is amazing in terms of crafting components that glue well together, but the downside is that the tests you created for &lt;code&gt;&amp;lt;x-widget&amp;gt;&lt;/code&gt; are not enough, that top level file might be doing things just slightly differently.&lt;/p&gt;

&lt;p&gt;The benefits of writing tests first hold as well for your application entry point. If you try writing tests after-the-fact (as I&amp;rsquo;m currently doing) you&amp;rsquo;ll notice that things break as your entry point file is actually dependent on something in your &lt;code&gt;index.html&lt;/code&gt; file (as an example). Tests first will force you to make sure everything is as maximally modular as can be.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>