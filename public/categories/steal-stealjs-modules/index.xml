<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steal Stealjs Modules on Matthew Phillips</title>
    <link>https://matthewphillips.info/categories/steal-stealjs-modules.html</link>
    <description>Recent content in Steal Stealjs Modules on Matthew Phillips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Mar 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://matthewphillips.info/categories/steal-stealjs-modules.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Organizing your library project with StealJS</title>
      <link>https://matthewphillips.info/posts/organizing-your-library-project-with-stealjs.html</link>
      <pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://matthewphillips.info/posts/organizing-your-library-project-with-stealjs.html</guid>
      <description>

&lt;p&gt;With &lt;a href=&#34;http://stealjs.com/&#34;&gt;StealJS&lt;/a&gt; you can easily set up an open-source library that fits with the way you like to organize your code. A common directory structure might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- src
  - main.js
  - dep.js
- test
  - test.html
  - test.js
package.json
Gruntfile.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to keep a shallow folder structure we&amp;rsquo;ve divided the library&amp;rsquo;s source code in &lt;code&gt;src&lt;/code&gt; and its tests in &lt;code&gt;test&lt;/code&gt;. The root directory only contains our &lt;code&gt;package.json&lt;/code&gt; and a &lt;code&gt;Gruntfile.js&lt;/code&gt; for builds.&lt;/p&gt;

&lt;p&gt;With this structure you might try to install your module with NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install my-module --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then load it in your project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import myModule from &amp;quot;my-module&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However this will fail because your &lt;code&gt;main&lt;/code&gt; is not pointing to right place. Imagine your &lt;code&gt;main.js&lt;/code&gt; look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import dep from &amp;quot;my-module/dep&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Steal will look for &lt;code&gt;dep.js&lt;/code&gt; in the project&amp;rsquo;s root folder. To set an alternative root, correctly called the lib folder, set it in the &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;my-module&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;dist/cjs/main.js&amp;quot;,
  &amp;quot;system&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;main&amp;quot;,
    &amp;quot;directories&amp;quot;: {
      &amp;quot;lib&amp;quot;: &amp;quot;src&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells Steal that your library&amp;rsquo;s code is nested under the &lt;code&gt;src&lt;/code&gt; folder. This makes it easy to refer to your module by name in its internal code. With your test do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import myModuleDep from &amp;quot;my-module/dep&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will correctly load &lt;code&gt;src/dep.js&lt;/code&gt; if that&amp;rsquo;s the module you want to test.&lt;/p&gt;

&lt;h2 id=&#34;building:54829a1cb3a64537a249d84efe4fc1a9&#34;&gt;Building&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re only target Steal you can go ahead and publish your module on NPM. But if you want to reach users of other module loaders you should set up a build script. &lt;a href=&#34;http://stealjs.com/docs/steal-tools.html&#34;&gt;steal-tools&lt;/a&gt; makes this easy. For example if using Grunt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;grunt.initConfig({
  &amp;quot;steal-export&amp;quot;: {
    dist: {
      system: {
        config: &amp;quot;package.json!npm&amp;quot;
      },
      outputs: {
        &amp;quot;+cjs&amp;quot;: {},
        &amp;quot;+amd&amp;quot;: {},
        &amp;quot;global-js&amp;quot;: {]
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then by simply running &lt;code&gt;grunt steal-export&lt;/code&gt; will produce &lt;code&gt;dist/cjs&lt;/code&gt;, &lt;code&gt;dist/amd&lt;/code&gt;, and &lt;code&gt;dist/global&lt;/code&gt; folders containing code that will run in RequireJS, Browserify, and as a browser global. Read &lt;a href=&#34;http://stealjs.com/docs/StealJS.project-exporting.html&#34;&gt;the full guide&lt;/a&gt; on setting up an export for your project for more.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/bitovi-components/bit-tabs&#34;&gt;bit-tabs&lt;/a&gt; for a full example of this directory structure in action.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>