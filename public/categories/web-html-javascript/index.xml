<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Html Javascript on Matthew Phillips</title>
    <link>https://matthewphillips.info/categories/web-html-javascript.html</link>
    <description>Recent content in Web Html Javascript on Matthew Phillips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://matthewphillips.info/categories/web-html-javascript.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>I&#39;m Sold on HTML-based Templating</title>
      <link>https://matthewphillips.info/posts/im-sold-on-html-based-templating.html</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://matthewphillips.info/posts/im-sold-on-html-based-templating.html</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve finally come around to liking HTML-based templates. I&amp;rsquo;ve been a hold-out for a long time but I&amp;rsquo;m finding it harder and harder to resist the tide and I&amp;rsquo;m officially calling it today; HTML templates have won.&lt;/p&gt;

&lt;p&gt;What am I talking about? If you&amp;rsquo;ve done heavy JavaScript developer since, well the dawn of time, you&amp;rsquo;re probably used to creating templates a lot like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/mustache&amp;quot; id=template&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt; {{name}}&amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a hack, always has been. The script tag was never intended to hold arbitrary strings for later processing, but it does, so it&amp;rsquo;s always been a good fit for templates. Then Web Components came around (which I&amp;rsquo;ve written about &lt;a href=&#34;http://dailyjs.com/2014/03/10/components-controls/&#34;&gt;here&lt;/a&gt;) and introduced the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag. The template tag brought some major benefits; namely that the content is parsed but not executed. This means that a template can have &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags with JavaScript, CSS, etc. and none of it is ran until the template is inserted into the page.&lt;/p&gt;

&lt;p&gt;This is great! This means you can define, for example, a custom element and it&amp;rsquo;s template, then have some JavaScript to execute on insert. Then to activate a template all you have to do is use &lt;code&gt;document.importNode&lt;/code&gt; and insert it anywhere you like and &lt;em&gt;boom&lt;/em&gt;, it&amp;rsquo;s like inserting new HTML into the page.&lt;/p&gt;

&lt;h2 id=&#34;how-things-changed:877b2f6ba80dcf31bf51d654e0e70934&#34;&gt;How Things Changed&lt;/h2&gt;

&lt;p&gt;The problem with templates has always been that they do not define a data-binding strategy. And for obvious reasons they can&amp;rsquo;t. Can you imagine Mozilla, Google, Microsoft, Apple and others all agreeing on, for example, Mustache as the data-binding language for templates? No way! Never going to happen. And because of that we only get basic HTML. The problem is that basic HTML isn&amp;rsquo;t all that great for dynamic creation. It&amp;rsquo;s just XML, and XML just has tags and attributes. That doesn&amp;rsquo;t have the power of a string-concatenation-based templating language like Mustache.&lt;/p&gt;

&lt;p&gt;But it doesn&amp;rsquo;t matter. Angular has shown that HTML-based templating can work. And devs have spoken; we like to put the HTML straight into the page. Adding script tags or importing HTML from a module-loader feels foreign and weird.&lt;/p&gt;

&lt;p&gt;So the question becomes, will there be a standard developed around HTML-based templates? Probably not. But there are certainly a variety of patterns that are emerging, such as &lt;code&gt;for-each=&amp;quot;items&amp;quot;&lt;/code&gt; to iterate a list. One of my colleagues &lt;a href=&#34;https://twitter.com/daffl&#34;&gt;David Luecke&lt;/a&gt; released &lt;a href=&#34;http://daffl.github.io/breezy/&#34;&gt;HTML Breezy&lt;/a&gt; recently, a Virtual-DOM backed HTML based templating engine that runs in both Node and the browser. So me, I&amp;rsquo;m sold. My next templating language will be HTML. The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag is too compelling to continue to ignore.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>